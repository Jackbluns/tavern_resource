$((async()=>{const extensions=(await getTavernRegexes({enable_state:"enabled"})).filter((regex=>regex.script_name.includes("预安装插件"))).flatMap((regex=>Object.entries(YAML.parse(regex.replace_string)))).map((([name,url])=>{let tag=url.replace(/(\.git|\/)$/,"");return tag=tag.substring(tag.lastIndexOf("/")+1),{[tag]:{name,url}}})).reduce(((previous,current)=>_.defaults(previous,current)),{}),current_extensions=await async function get_third_party_extension_names(){try{const response=await fetch("/api/extensions/discover");return response.ok?(await response.json()).filter((extension=>"system"!==extension.type)).map((extension=>extension.name.replace("third-party/",""))):[]}catch(err){return console.error(err),[]}}(),uninstall_extension_tags=_.difference(Object.keys(extensions),current_extensions);0!==uninstall_extension_tags.length&&await SillyTavern.callGenericPopup("以下需要的插件尚未安装, 是否安装?<br>"+uninstall_extension_tags.map((tag=>`- ${extensions[tag].name}`)).join("<br>"),SillyTavern.POPUP_TYPE.CONFIRM,"",{leftAlign:!0})&&(await Promise.allSettled(uninstall_extension_tags.map((tag=>async function install_extension(url){const request=await fetch("/api/extensions/install",{method:"POST",headers:SillyTavern.getRequestHeaders(),body:JSON.stringify({url})});if(!request.ok){const text=await request.text();return toastr.warning(`扩展安装失败: ${text||request.statusText}`),console.error("扩展安装失败",request.status,request.statusText,text),!1}const response=await request.json();return toastr.success(`扩展安装成功: 已成功安装由 '${response.author}' 编写的 '${response.display_name}' (版本 ${response.version})!`),console.debug(`已成功将 '${response.display_name}' 安装到 ${response.extensionPath}`),!0}(extensions[tag].url)))),setTimeout((()=>triggerSlash("/reload-page")),3e3))}));